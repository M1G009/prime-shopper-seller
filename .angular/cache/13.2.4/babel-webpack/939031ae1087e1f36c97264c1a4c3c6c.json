{"ast":null,"code":"import { map, catchError } from 'rxjs/operators';\nimport { throwError, Subject } from 'rxjs';\nimport { HttpHeaders } from '@angular/common/http';\nimport * as $ from \"jquery\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/platform-browser\";\nimport * as i3 from \"ngx-toastr\";\nexport let DataService = /*#__PURE__*/(() => {\n  class DataService {\n    constructor(_http, titleService, toastr) {\n      this._http = _http;\n      this.titleService = titleService;\n      this.toastr = toastr;\n      this.productData = [];\n      this.selectedSocialMedias = new Subject();\n      this._id = {};\n      this.localUrl = 'http://192.168.1.3:8080/api/v1';\n      this.liveUrl = 'https://prime-shopper-api.herokuapp.com/api/v1';\n      this.addproduct_url = \"https://prime-shopper.herokuapp.com/api/v1/seller/product/add\";\n      this.updateproduct_url = \"https://prime-shopper.herokuapp.com/api/v1/seller/product/update\"; // addproduct_url = \"http://localhost:5000/api/v1/seller/product/add\";\n      // liveUrl: string = 'http://192.168.1.4:9090/api/v1/front';\n      // apiUrl: string = (window.location.origin.match('localhost') !== null ? this.localUrl : this.liveUrl);\n\n      this.apiUrl = this.liveUrl;\n      this.userName = new Subject();\n    }\n\n    setTitle(title = 'Home', main = '| PrimeShopper') {\n      this.titleService.setTitle(`${title} ${main}`);\n    }\n\n    _response(response) {\n      if (response.code !== 200) {\n        throw new Error(response.data);\n      }\n\n      return response.data;\n    }\n\n    _handleError(error) {\n      let errorMessage = '';\n\n      if (error.error instanceof ErrorEvent) {\n        errorMessage = `Error: ${error.error.message}`;\n      } else {\n        errorMessage = error.message || 'Oops! Something went wrong, Please try again.';\n      }\n\n      return errorMessage;\n    }\n\n    __post(url, data, loaderElement = false, progressBarLine = false) {\n      var buttonName = \"\";\n\n      if (loaderElement) {\n        buttonName = $(loaderElement).text();\n        $(buttonName).attr('disabled', 'true');\n        $(loaderElement).html('<i class=\"fa fa-spin fa-spinner\"></i> ' + buttonName);\n      }\n\n      var options = {\n        headers: this._getHeaders()\n      }; // if(progressBarLine !== false){\n      //   options.reportProgress = true;\n      //   options.observe = 'events';\n      //   $(progressBarLine).attr('style', 'width:1%');\n      // }\n\n      return this._http.post(`${this.apiUrl}${url}`, data, options).pipe(map(response => {\n        // Remove Loader\n        if (loaderElement) {\n          $(buttonName).removeAttr('disabled');\n          $(loaderElement).find('.fa').remove();\n          $(loaderElement).html(buttonName);\n        }\n\n        return this._response(response);\n      }), catchError(error => {\n        // this._toast.error(error)\n        if (loaderElement) {\n          $(loaderElement).find('.fa').remove();\n          $(loaderElement).html(buttonName);\n        }\n\n        return throwError(this._handleError(error));\n      }));\n    }\n\n    _getHeaders() {\n      var token = this.getToken();\n      console.log(\"token\", token);\n      return new HttpHeaders({\n        'X-Authentication-token': token ? token : 'unAuth'\n      });\n    }\n\n    getToken() {\n      return localStorage.getItem('X-Authentication-token');\n    }\n\n    showAlert(type, title, message) {\n      if (type == 'success') {\n        this.toastr.success(message, title);\n      } else if (type == 'error') {\n        this.toastr.error(message, title);\n      }\n    }\n\n    setTemp(key, value) {\n      localStorage.setItem(key, value);\n    }\n\n    getTemp(key) {\n      return localStorage.getItem(key);\n    }\n\n    add_product(data) {\n      let options = {\n        headers: this._getHeaders()\n      };\n      return this._http.post(this.addproduct_url, data, options);\n    }\n\n    update_product(data) {\n      return this._http.post(this.updateproduct_url, data);\n    }\n\n  }\n\n  DataService.ɵfac = function DataService_Factory(t) {\n    return new (t || DataService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Title), i0.ɵɵinject(i3.ToastrService));\n  };\n\n  DataService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: DataService,\n    factory: DataService.ɵfac,\n    providedIn: 'root'\n  });\n  return DataService;\n})();","map":null,"metadata":{},"sourceType":"module"}